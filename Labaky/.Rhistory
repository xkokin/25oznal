# load libraries
library(tidyverse)
# load data
data <- read_csv("players_22.csv")
# inspect structure
glimpse(data)
summary(data)
head(data)
# define positions
offense_positions <- c("LF", "CF", "RF", "LW", "RW", "LS", "ST", "RS")
defense_positions <- c("LWB", "RWB", "LCB", "CB", "RCB", "LB", "RB")
midfield_positions <- c("LM", "LAM", "CM", "RM", "RAM", "CAM", "CDM", "DM", "LDM", "RDM")
goalkeepers <- c("GK")
# Assign categories based on club_position
data <- data %>%
mutate(position_category = case_when(
str_detect(player_positions, paste(offense_positions, collapse = "|")) ~ "Offense",
str_detect(player_positions, paste(defense_positions, collapse = "|")) ~ "Defense",
str_detect(player_positions, paste(midfield_positions, collapse = "|")) ~ "Midfield",
str_detect(player_positions, paste(goalkeepers, collapse = "|")) ~ "Goalkeeper",
TRUE ~ "Unknown"
))
# count left-footed players by positio
left_footed_distribution <- data %>%
filter(preferred_foot == "Left") %>%
count(position_category)
# count all players by position
total_distribution <- data %>%
count(position_category)
# calculate proportions
left_footed_proportion <- left_footed_distribution %>%
left_join(total_distribution, by = "position_category") %>%
mutate(percentage = (n.x / n.y) * 100)
print(left_footed_proportion)
# plot
ggplot(left_footed_proportion, aes(x = position_category, y = percentage, fill = position_category)) +
geom_bar(stat = "identity") +
labs(title = "Proportion of Left-Footed Players by Position",
x = "Position Category",
y = "Percentage of Left-Footed Players") +
theme_minimal()
# compare market values of left-footed vs. right-footed players
ggplot(players_data, aes(x = preferred_foot, y = value_eur, fill = preferred_foot)) +
geom_boxplot() +
labs(title = "Market Value of Left vs. Right Footed Players",
x = "Preferred Foot",
y = "Market Value (EUR)") +
theme_minimal()
# compare wages
ggplot(players_data, aes(x = preferred_foot, y = wage_eur, fill = preferred_foot)) +
geom_boxplot() +
labs(title = "Wages of Left vs. Right Footed Players",
x = "Preferred Foot",
y = "Wages (EUR)") +
theme_minimal()
# compare market values of left-footed vs. right-footed players
ggplot(data, aes(x = preferred_foot, y = value_eur, fill = preferred_foot)) +
geom_boxplot() +
labs(title = "Market Value of Left vs. Right Footed Players",
x = "Preferred Foot",
y = "Market Value (EUR)") +
theme_minimal()
# compare wages
ggplot(data, aes(x = preferred_foot, y = wage_eur, fill = preferred_foot)) +
geom_boxplot() +
labs(title = "Wages of Left vs. Right Footed Players",
x = "Preferred Foot",
y = "Wages (EUR)") +
theme_minimal()
# filter young players (< 25 y)
young_players <-data %>%
filter(age < 25)
# compare potential
ggplot(young_players, aes(x = preferred_foot, y = potential, fill = preferred_foot)) +
geom_boxplot() +
labs(title = "Potential Ratings of Young Left vs. Right Footed Players",
x = "Preferred Foot",
y = "Potential Rating") +
theme_minimal()
# chi-square test, are left-footed players more common in offense?
left_vs_right_table <- table(data$preferred_foot, data$position_category)
chisq.test(left_vs_right_table)
# t-test: compare market values
t.test(value_eur ~ preferred_foot, data = players_data)
# t-test: compare market values
t.test(value_eur ~ preferred_foot, data = data)
# T-test: Compare potential ratings of young players
t.test(potential ~ preferred_foot, data = young_players)
library{tidyverse}
library(tidyverse)
names(players)
players <- read_csv("./players_22.csv")
names(players)
library(tidyverse)
library(tidyverse)
library(cluster)
library(factoextra)
install.packages(c("factoextra", "dbscan", "rpart", "pheatmap"))
library(tidyverse)
library(tidyverse)
library(cluster)
library(factoextra)
library(dbscan)
library(rpart)
library(rpart.plot)
install.packages("rpart.plot")
library(tidyverse)
library(tidyverse)
library(cluster)
library(factoextra)
library(dbscan)
library(rpart)
library(rpart.plot)
library(pheatmap)
# Select key features for clustering
fifa_cluster <- fifa %>%
select(short_name, overall, age, height_cm, weight_kg, dribbling, passing, defending, shooting, pace, physic) %>%
drop_na()
# Select key features for clustering
fifa_cluster <- players %>%
select(short_name, overall, age, height_cm, weight_kg, dribbling, passing, defending, shooting, pace, physic) %>%
drop_na()
head(fifa_cluster)
# Remove names for clustering
fifa_features <- fifa_cluster %>%
select(-short_name)
# Scale data
fifa_scaled <- scale(fifa_features)
# Determine optimal number of clusters using Elbow method
fviz_nbclust(fifa_scaled, kmeans, method = "wss") +
labs(title = "Elbow Method for Optimal K")
# Apply k-means
set.seed(123)
kmeans_res <- kmeans(fifa_scaled, centers = 3, nstart = 25)
fifa_cluster$kmeans_cluster <- as.factor(kmeans_res$cluster)
# Visualize
fviz_cluster(kmeans_res, data = fifa_scaled, geom = "point", ellipse.type = "norm", main = "K-Means Clustering")
# Estimate eps using kNN plot
kNNdistplot(fifa_scaled, k = 5)
abline(h = 1.5, col = "red")
# Apply DBSCAN
dbscan_res <- dbscan(fifa_scaled, eps = 1.5, minPts = 5)
fifa_cluster$dbscan_cluster <- as.factor(dbscan_res$cluster)
# Visualize
fviz_cluster(list(data = fifa_scaled, cluster = dbscan_res$cluster), main = "DBSCAN Clustering")
# Create simplified class (assume roles based on overall + defending + attacking)
fifa_cluster$role <- with(fifa_cluster, ifelse(defending > 60, "Defender",
ifelse(shooting > 60, "Attacker", "Midfielder")))
# Train tree
tree <- rpart(role ~ overall + age + height_cm + weight_kg + dribbling + passing + defending + shooting + pace + physic,
data = fifa_cluster, method = "class")
# Plot
rpart.plot(tree)
# Compute correlation matrix
cor_mat <- cor(fifa_features)
pheatmap(cor_mat, main = "Heatmap of Feature Correlations")
library(tidyverse)
library(tidyverse)
library(cluster)
library(factoextra)
library(dbscan)
library(rpart)
library(rpart.plot)
library(pheatmap)
library(ggplot2)
# Determine optimal number of clusters using Elbow method
fviz_nbclust(fifa_scaled, kmeans, method = "wss") +
labs(title = "Elbow Method for Optimal K")
# Determine optimal number of clusters using Elbow method
fviz_nbclust(fifa_scaled, kmeans, method = "wss") +
labs(title = "Elbow Method for Optimal K")
# Apply k-means
set.seed(123)
kmeans_res <- kmeans(fifa_scaled, centers = 3, nstart = 25)
df_kmeans <- cbind(fifa_scaled, cluster = factor(kmeans_res$cluster))
fifa_cluster$kmeans_cluster <- as.factor(kmeans_res$cluster)
# Visualize
fviz_cluster(kmeans_res, data = fifa_scaled, geom = "point", ellipse.type = "norm", main = "K-Means Clustering")
print(kmeans_result$centers)
# Determine optimal number of clusters using Elbow method
fviz_nbclust(fifa_scaled, kmeans, method = "wss") +
labs(title = "Elbow Method for Optimal K")
# Apply k-means
set.seed(123)
kmeans_res <- kmeans(fifa_scaled, centers = 3, nstart = 25)
df_kmeans <- cbind(fifa_scaled, cluster = factor(kmeans_res$cluster))
fifa_cluster$kmeans_cluster <- as.factor(kmeans_res$cluster)
# Visualize
fviz_cluster(kmeans_res, data = fifa_scaled, geom = "point", ellipse.type = "norm", main = "K-Means Clustering")
print(kmeans_res$centers)
aggregate(df_scaled, by = list(Cluster = kmeans_result$cluster), mean)
# Determine optimal number of clusters using Elbow method
fviz_nbclust(fifa_scaled, kmeans, method = "wss") +
labs(title = "Elbow Method for Optimal K")
# Apply k-means
set.seed(123)
kmeans_res <- kmeans(fifa_scaled, centers = 3, nstart = 25)
df_kmeans <- cbind(fifa_scaled, cluster = factor(kmeans_res$cluster))
fifa_cluster$kmeans_cluster <- as.factor(kmeans_res$cluster)
# Visualize
fviz_cluster(kmeans_res, data = fifa_scaled, geom = "point", ellipse.type = "norm", main = "K-Means Clustering")
print(kmeans_res$centers)
aggregate(fifa_scaled, by = list(Cluster = kmeans_res$cluster), mean)
# Estimate eps using kNN plot
kNNdistplot(fifa_scaled, k = 5)
abline(h = 1.5, col = "red")
# Apply DBSCAN
dbscan_res <- dbscan(fifa_scaled, eps = 1.5, minPts = 5)
df_dbscan <- cbind(fifa_scaled, cluster = factor(dbscan_res$cluster))
fifa_cluster$dbscan_cluster <- as.factor(dbscan_res$cluster)
# Visualize
fviz_cluster(list(data = fifa_scaled, cluster = dbscan_res$cluster), main = "DBSCAN Clustering")
table(dbscan_res$cluster)
df_tree <- players  # original data
df_tree$PositionGroup <- ifelse(grepl("GK", df$player_positions), "GK",
ifelse(grepl("CB|LB|RB|WB|DM", df$player_positions), "Defender",
ifelse(grepl("CAM|CM|LM|RM", df$player_positions), "Midfielder", "Attacker")))
# Estimate eps using kNN plot
kNNdistplot(fifa_scaled, k = 5)
abline(h = 1.5, col = "red")
# Apply DBSCAN
dbscan_res <- dbscan(fifa_scaled, eps = 1.0, minPts = 8)
df_dbscan <- cbind(fifa_scaled, cluster = factor(dbscan_res$cluster))
fifa_cluster$dbscan_cluster <- as.factor(dbscan_res$cluster)
# Visualize
fviz_cluster(list(data = fifa_scaled, cluster = dbscan_res$cluster), main = "DBSCAN Clustering")
table(dbscan_res$cluster)
# Estimate eps using kNN plot
kNNdistplot(fifa_scaled, k = 5)
abline(h = 1.5, col = "red")
# Apply DBSCAN
dbscan_res <- dbscan(fifa_scaled, eps = 0.8, minPts = 10)
df_dbscan <- cbind(fifa_scaled, cluster = factor(dbscan_res$cluster))
fifa_cluster$dbscan_cluster <- as.factor(dbscan_res$cluster)
# Visualize
fviz_cluster(list(data = fifa_scaled, cluster = dbscan_res$cluster), main = "DBSCAN Clustering")
table(dbscan_res$cluster)
library(tidyverse)
library(tidyverse)
library(cluster)
library(factoextra)
library(dbscan)
library(rpart)
library(rpart.plot)
library(pheatmap)
library(ggplot2)
# Estimate eps using kNN plot
kNNdistplot(fifa_scaled, k = 5)
abline(h = 1.5, col = "red")
# Apply DBSCAN
dbscan_res <- dbscan(fifa_scaled, eps = 0.8, minPts = 8)
df_dbscan <- cbind(fifa_scaled, cluster = factor(dbscan_res$cluster))
fifa_cluster$dbscan_cluster <- as.factor(dbscan_res$cluster)
# Visualize
fviz_cluster(list(data = fifa_scaled, cluster = dbscan_res$cluster), main = "DBSCAN Clustering")
table(dbscan_res$cluster)
# Estimate eps using kNN plot
kNNdistplot(fifa_scaled, k = 5)
abline(h = 1.5, col = "red")
# Apply DBSCAN
dbscan_res <- dbscan(fifa_scaled, eps = 1.0, minPts = 8)
df_dbscan <- cbind(fifa_scaled, cluster = factor(dbscan_res$cluster))
fifa_cluster$dbscan_cluster <- as.factor(dbscan_res$cluster)
# Visualize
fviz_cluster(list(data = fifa_scaled, cluster = dbscan_res$cluster), main = "DBSCAN Clustering")
table(dbscan_res$cluster)
